# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.




from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QImage,QPixmap 
import glob
import os
from PyQt5.QtWidgets import QMainWindow
class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow,self).__init__()

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(1920, 1080)
        self.setStyleSheet("\n"
"")
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setStyleSheet(
            "QPushButton[objectName^=\"but\"]{\n"
                "border-style: outset;""\n"
                " border-radius: 10px;"
                "border-width: 2px;"
                "border-color: gray;"
                "font: 14pt \"Adobe Pi Std\";\n"
                "color: rgb(255, 255, 255);}\n"
                "QPushButton:pressed { border-style : inset; border-color:black}"
            "#centralwidget{background-image: url(:/images/assets/back1.jpg);}")
        self.centralwidget.setObjectName("centralwidget")
        self.timer = 10000
        
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")

        
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.frame.setGeometry(QtCore.QRect(20, 250, 1000, 400))
        self.frame.setObjectName("frame")


        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")


        self.scrollArea = QtWidgets.QScrollArea(self.frame)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollArea.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.scrollArea.setStyleSheet("background-color:transparent;")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1192, 688))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        
        self.gridLayout_2 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout_2.setObjectName("gridLayout_2")

        self.buttons={}
        self.images =[]

        #We search all the style images and get the total length
        for file in glob.glob("pictures/*.*g"):
            self.images.append(file)
        self.img_len = len(self.images)
        for k in range (self.img_len):
            name_but=os.path.basename(self.images[k])
            name_but=name_but[:name_but.find('.')]
            print(name_but)
            horizontalLayout = QtWidgets.QHBoxLayout()
            QLabel=QtWidgets.QLabel(self.scrollAreaWidgetContents)
            QLabel.setFixedHeight(150)
            image_data=self.images[k]

            if image_data ==None:
                print("Image non trouv√©e")
            else :
                self.pix =QPixmap()
                self.pix.load(self.images[k])
            self.pix = self.pix.scaled(256, 256, QtCore.Qt.KeepAspectRatio, QtCore.Qt.FastTransformation)
            QLabel.setPixmap(self.pix)
            horizontalLayout.addWidget(QLabel)
            self.gridLayout_2.addLayout(horizontalLayout, 0, k, 1, 1)
            self.buttons[(k)] = QtWidgets.QPushButton(name_but,self.scrollAreaWidgetContents)
            """self.buttons[(k)].setStyleSheet("QPushButton{\n"
                        "border-style: outset;""\n"
                        "border-radius: 10px;"
                        "border-width: 2px;"
                        "border-color: gray;"
                        "font: 14pt \"Adobe Pi Std\";\n"
                        "color: rgb(255, 255, 255);}\n"
                        "QPushButton:pressed { border-style : inset; border-color:black}")"""
            self.buttons[(k)].setFlat(True)
            self.gridLayout_2.addWidget(self.buttons[(k)], 1, k, 1, 1)
            self.buttons[(k)].setCheckable(True)
            


        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout.addWidget(self.scrollArea, 0, 0, 1, 1)
        #self.gridLayout_3.addWidget(self.frame, 0, 0, 1, 1)
        
        
        self.but1 = QtWidgets.QPushButton(self.centralwidget)
        self.but1.setGeometry(QtCore.QRect(1500, 500, 301, 51))
        self.but1.setMouseTracking(True)
        #css stylesheet to definie our buttons

        self.but1.setObjectName("but1")
        self.but1.clicked.connect(lambda: self.mousePressEvent(QtGui.QMouseEvent.MouseButtonPress))
        
        self.qtim = QtCore.QTimer()
        self.qtim.start(self.timer)
        self.qtim.timeout.connect(self.close)
        
        
        self.setCentralWidget(self.centralwidget)
        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)


    def keyPressEvent(self, event):
    # Did the user press the Escape key?
        if event.key() == QtCore.Qt.Key_Escape: # QtCore.Qt.Key_Escape is a value that equates to what the operating system passes to python from the keyboard when the escape key is pressed.
        # Yes: Close the window
            print("TEST")
    def mousePressEvent(self,event):
        if event == QtGui.QMouseEvent.MouseButtonPress:
            self.addtimer()
            print("TEST")
        else : 
            self.addtimer()
            print("Test")


    def addtimer(self):
        
        self.timer+=5000
        self.qtim.setInterval(self.timer)
        self.qtim.start()
        print(self.timer)
        

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.but1.setText(_translate("MainWindow", "Explore!"))

import source


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    
    ui = Ui_MainWindow()
    ui.setupUi()
    ui.show()
    sys.exit(app.exec_())
